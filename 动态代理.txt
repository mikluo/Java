
动态代理

JavaSE 老马说编程 设计模式

    利用反射和注解，可以编写灵活的的程序，今天主要来探讨一些Java中的另一个动态特性-动态代理。

        动态代理是一种强大的功能，它可以在运行时动态的创建一个类，实现一个接口，可以在不修改原有类的基础上动态为通过该类获取的对象添加方法、修改行为，广泛应用于各种系统程序中、框架和库中，比如：Spring、MyBatis、等。
        动态代理是面向切面编程的基础，切面的例子有日志、性能监控、权限检查、数据库事务，它们在程序中得到很多地方都会用到，代码都差不多，但与某个具体的业务逻辑的也不太密切，如果在每个用到的地方都写，代码会很冗余，也难以维护，AOP将这些切面与主题逻辑相分离，代码简单优雅的多。

静态代理

    代理是一一个比较通用的词，作为一个软件设计模式，基本概念和日常生活中的代理类似，代理背后一般至少有一个实际的对象，代理的外部功能和实际对象一般是一样的，用户和代理打交道，不直接接触实际的代理对象，虽然和外部的实际对象一样，但是代理有他存在的价值，比如：

        节省成本比较高的实际对象的创建开销，按需延迟加载，创建代理时并不真正创建实际的对象，而只是保存实际对象的地址，在需要时再加载或者创建。
        执行权限检查，代理检查权限后，在调用设计对象。
        屏蔽网络差异和复杂性，代理在本地，而实际对象在其他服务器上，调用本地代理时，本地代理请求其他的服务器。
        看一个简单的例子

    public class SimpleStaticProxyDemo {
        static interface IService{
            public void sayHello();
        }
        static class RealService implements IService{
            @Override
            public void sayHello() {
                System.out.println("hello");
            }
        }
        static class TraceProxy implements IService{
            private IService realIService;
            public TraceProxy(IService realIService){
                this.realIService = realIService;
            }
            @Override
            public void sayHello() {
                System.out.println("entering sayhello");
                this.realIService.sayHello();
                System.out.println("leaving sayhello");
            }
        }
        public static void main(String[] args) {
            IService realService = new RealService();
            IService proxyService = new TraceProxy(realService);
            proxyService.sayHello();
        }
    }


输出结果：
entering sayhello
hello
leaving sayhello


代理和实际对象一般有相同的接口，在这个接口，共同的接口是IService，实际对象是RealService，代理TraceProxy。TraceProxy内部有一个IService的成员变量，对于方法sayhello的调用，它转发非了实际对象，在调用前后输出了一写跟踪调试信息。

    适配器和装饰器模式与代理模式有点类似，它们背后都有一个别的对象，都是通过组合的方式指向该对象，不同之处在于，适配器是提供了一个不一样的新接口，装饰器是对原有的接口起到了"装饰"
    的作用，可能是增加了新接口，修改了原有的行为等，代理一般不改变接口。不过，我们并不是想强调它们的差别，可以将它们看做代理变体，统一看待。

    在上面的例子中，我们想达到的目的是在实际对象的方法调用前后加一些调试语句，为了在不修改原类的情况下达到这个目的，我们在代码中加入创建了一个代理类TraceProxy，它的代码是在写程序时固定的，所以称之为静态代理。

输出跟踪调试信息是一个通用的需求，可以想象，如果每个类都小，而又不希望修改类的定义，我们需要为每个类创建代理，实现所有接口，这个工作就太繁琐了如果在有其他的切面需求呢，整个工作可能又要重来一遍。

这时就需要动态代理了，主要有两种实现方式，jdk动态代理和第三方库cglib动态代理。



JDK动态代理

    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Method;
    import java.lang.reflect.Proxy;

    public class SimpleJDKDynamicProxyDemo {
        static interface IService{
            public void sayHello();
        }
        static class RealService implements IService{
            @Override
            public void sayHello() {
                System.out.println("hello");
            }
        }
        static class SimpleInvocationHandler implements InvocationHandler{
            private Object realObj;
            public SimpleInvocationHandler(Object realObj) {
                this.realObj = realObj;
            }
            @Override
            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                System.out.println("entering"+method.getName());
                Object result = method.invoke(realObj,args);
                System.out.println("leaving"+method.getName());
                return result;
            }
            public static void main(String[] args) {
                IService realService = new RealService();
                IService proxyService = (IService) Proxy.newProxyInstance(IService.class.getClassLoader(),realService.getClass().getInterfaces(),new SimpleInvocationHandler(realService));
                proxyService.sayHello();
            }
        }
    }





    IService和RealService的定义不变，程序输出也没变，但代理对象proxyService的创建方式变了，它使用java.lang.reflect包中的Proxy类的静态方法newProxyInstance来创建对象，这个方法声明如下:

    @CallerSensitive
        public static Object newProxyInstance(ClassLoader loader,
                                              Class<?>[] interfaces,
                                              InvocationHandler h)
            throws IllegalArgumentException
        {
            Objects.requireNonNull(h);
            final Class<?>[] intfs = interfaces.clone();
            final SecurityManager sm = System.getSecurityManager();
            if (sm != null) {
                checkProxyAccess(Reflection.getCallerClass(), loader, intfs);
            }

    它有三个参数：

            loader表示类加载器，例子使用和IService一样的类加载器。
            interfaces表示代理类要实现的接口列表，是一个数组，元素的类只能是接口，不能是普通的类，例子中只有一个IService。
            h的类型为InvocationHandler，它是一个接口，也定义在java.lang.reflect包中，它只定义了一个invoke,对代理接口所有方法的调用都会转给该方法。

    newProxyInstance的返回值类型为Object,可以强制转换为interfaces数组中某个接口类型，这里我们强制转换为IService类型，需要注意的是，它不能强制转换为某个类型，比如:RealService，即使它代理的对象类型为RealService。如果真的那样做了，即使在编写代码时不会报错，但是会在运行时抛出ClassCastException：

SimpleInvocaionHandler实现了InvocationHanlder，它的构造方法接受一个参数realObj表示被代理的对象，invoke方法处理所有的接口，他有三个参数:

        proxy表示代理对象的本身，需要注意的是，它不是被代理的对象，这个参数一般用处不大。

        method表示正在被调用的方法

        args表示方法的参数
        在SimpleInvocationHandler的invoke实现中，我们调用了method的invoke方法，传递了实际对象的realObj作为参数，达到了调用实际对象方法的目的，在调用任何方法的前后，我们输出了跟踪调试语句。需要注意的是，不能proxy作为参数传递给method.invoke，比如:
        Object result = method.invoke(proxy,args)；

上面的语句会出现死循环，因为proxy表示当前代理对象，这么调用又会调用到SimpleInvocationHandler的invoke方法，如下： 

基本原理

    看一下Proxy#newProxyInstance的内部执行逻辑可以用如下代码表示：

    Class<?> proxyCls = Proxy.getProxyClass(IService.class.getClassLoader(), 
            new Class<?>[] { IService.class });
    Constructor<?> ctor = proxyCls.getConstructor(new Class<?>[] { InvocationHandler.class });
    InvocationHandler handler = new SimpleInvocationHandler(realService);
    IService proxyService = (IService) ctor.newInstance(handler);

    分为三步：

    1.通过Proxy.getProxyClass创建代理类Class对象，该对象会被缓存。
    2.获取代理类的构造方法，构造方法有一个InvocationHanlder类型的参数
    3.先创建InvocationHandler对象，并以该对象作为参数来创建代理类对象。

    Proxy#getProxyClass需要两个参数，一个是ClassLoader，另一个是接口数组，它会动态生成一个类，类名以$Proxy开头，后面是一个数字，对于上面的例子，动态生成的类的如下，为简化起见，先忽略异常处理的代码：

    final class $Proxy0 extends Proxy implements SimpleJDKDynamicProxyDemo.IService {
        private static Method m1;
        private static Method m3;
        private static Method m2;
        private static Method m0;
        public $Proxy0(InvocationHandler paramInvocationHandler) {
            super(paramInvocationHandler);
        }
        public final boolean equals(Object paramObject) {
            return ((Boolean) this.h.invoke(this, m1, 
                    new Object[] { paramObject })).booleanValue();
        }
        public final void sayHello() {
            this.h.invoke(this, m3, null);
        }
        public final String toString() {
            return (String) this.h.invoke(this, m2, null);
        }
        public final int hashCode() {
            return ((Integer) this.h.invoke(this, m0, null)).intValue();
        }
        static {
            m1 = Class.forName("java.lang.Object").getMethod("equals",
                    new Class[] { Class.forName("java.lang.Object") });
            m3 = Class.forName("laoma.demo.proxy.SimpleJDKDynamicProxyDemo$IService")
                    .getMethod("sayHello",new Class[0]);
            m2 = Class.forName("java.lang.Object").getMethod("toString", new Class[0]);
            m0 = Class.forName("java.lang.Object").getMethod("hashCode", new Class[0]);
        }
    }



动态代理的优点

相比于静态代理，动态代理看起来麻烦了很多，那么它的有什么好处呢？使用它可以编写通用的代理逻辑，用于各种类型的被代理对象，而不需要为每个被代理对象都创建一个静态代理类。

看如下代码：

    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Method;
    import java.lang.reflect.Proxy;

    public class SimpleJDKDynamicProxyDemo {
        interface IServiceA{
             void sayHello();
        }
        interface IServiceB{
             void fly();
        }
        static class ServiceAImpl implements IServiceA{
            @Override
            public void sayHello() {
                System.out.println("hello");
            }
        }
        static class ServiceBImpl implements IServiceB{
            @Override
            public void fly() {
                System.out.println("flying");
            }
        }
        static class SimpleInvocationHandler implements InvocationHandler{
            private Object realObj;
            public SimpleInvocationHandler(Object realObj) {
                this.realObj = realObj;
            }
            @Override
            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                System.out.println("entering"+method.getName());
                Object result = method.invoke(realObj,args);
                System.out.println("leaving"+method.getName());
                return result;
            }
            @SuppressWarnings("unchecked")
            private static <T> T getProxy(Class<T> intf, T realObj) {
                return (T) Proxy.newProxyInstance(intf.getClassLoader(),new Class<?>[] { intf }, new SimpleInvocationHandler(realObj));
            }
            public static void main(String[] args) {
                IServiceA a = new ServiceAImpl();
                IServiceA aproxy = getProxy(IServiceA.class,a);
                aproxy.sayHello();
                IServiceB b = new ServiceBImpl();
                IServiceB bproxy = getProxy(IServiceB.class,b);
                bproxy.fly();
            }
        }
    }



CGLIB动态代理

    jdk动态代理的局限在于，它只能为接口创建代理，返回的代理对象也只能转换到某个接口上，如果一个类没有接口，或者希望代理费接口中定义的方法，那就没有办法了。cglib(https:/github.com/cglib/cglib)可以做到这一点。Spring,Hibernate等都使用了该类库。
    看一个简单的例子：

    import net.sf.cglib.proxy.Enhancer;
    import net.sf.cglib.proxy.MethodInterceptor;
    import net.sf.cglib.proxy.MethodProxy;
    import java.lang.reflect.Method;

    public class SimpleCGLibDemo {
        static class RealService{
            public void sayHello(){
                System.out.println("hello");
            }
        }
        static class SimpleInterceptor implements MethodInterceptor{
            @Override
            public Object intercept(Object obj, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
                System.out.println("entering"+method.getName());
                Object result = methodProxy.invokeSuper(obj,args);
                System.out.println("leaving"+method.getName());
                return result;
            }
        }
        private static<T> T getProxy(Class<T> cls){
            Enhancer enhancer = new Enhancer();
            enhancer.setSuperclass(cls);
            enhancer.setCallback(new SimpleInterceptor());
            return (T)enhancer.create();
        }
        public static void main(String[] args) {
            RealService proxyService = getProxy(RealService.class);
            proxyService.sayHello();
        }
    }

    RealService 表示代理类，它没有接口。getProxy()为一个类生成代理对象，这个代理对象可以安全的转换为被代理类的类型，它使用了cglib的Enhancer类，Enhancer类的setSupperclass设置被代理的类，setCallback设置被代理类的public非final方法被调用时的处理类，Enhancer支持多种类型，这里使用的类实现了MethodInterceptor接口，它与jdk动态代理中InvocationHandler优点类似，方法名称变成了intercept，多了一个MethodProxy类型的参数。

    与前面的InvocationHandler不同，SimpleInterceptor中没有被代理的对象，它通过MethodProxy#invokeSuper方法调用被代理类的方法。

Object result = proxy.invokeSuper(object, args);

    注意，它不能这样调用被代理类的方法：
    Object result = method.invoke(object, args);
    object是代理对象，调用这个方法还会调用到SimpelInterceptor的intercept方法，造成死循环。
    在main方法中，我们也没有创建被代理的对象，创建的对象就是代理对象。

基本实现原理

    cglib的实现机制与jdk的不同，它是通过继承实现的，它也是动态的创建了一个类，但是这个类的父类就是被代理类，代理类重写了父类中所有public非final方法，改为调用CallBack中的相关方法，在上例中，调用SimpleInterceptor的Intercept方法。

    JDK动态代理与CGLib动态代理比较

        JDK代理面向的是一组接口，它为这些接口动态的创建了一个实现类，接口的额具体实现逻辑通过自定义的InvocationHanlder实现的，这个实现是自定义的，也就是说，其背后不一定有真正被代理的对象，也可能多个实际对象，根据情况动态的选择。CGLib代理面向的是一个具体的类，它动态创建了一个新类，继承了该类，重写了该方法。

        从代理的角度来看，jdk动态代理是对象，需要先有一个实际的对象，自定义的Invocation引用该对象，然后创建一个代理类和代理对象，客户端访问到是代理对象，代理对象最后再调用实际对象的方法，cglib代理的是类，创建的对象只有一个。
        如果目的都是为一个类的的方法增强功能，jdk要求该类必须有接口，且只能处理接口中的方法，cglib没有这个限制。

